{"version":3,"sources":["Components/contactsList/ContactsList.module.css","Components/filterContacts/FilterContactForm.module.css","Components/container/Container.module.css","Components/spiner/Spiner.module.css","Components/createContactForm/CreateContactForm.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-operation.js","Components/contactsList/ContactsList.js","Components/container/Container.js","Components/createContactForm/CreateContactForm.js","Components/filterContacts/FilterContacts.js","Components/spiner/Spiner.js","Components/App.js","index.js"],"names":["module","exports","createContactsRequest","createAction","createContactsSuccess","createContactsError","getContactsRequest","getContactsSuccess","getContactsError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterChange","items","createReducer","state","payload","_","filter","contact","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfigContacts","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","getContactsSelector","getLoading","getFilterContactsSelector","createSelector","name","toLowerCase","includes","axios","defaults","baseURL","ContactsList","filteredContacts","useSelector","dispatch","useDispatch","useEffect","a","get","data","className","s","list","map","item","number","button","onClick","contactId","delete","then","catch","error","Container","children","styles","container","initialState","CreateContactForm","useState","setContact","onHandleChange","e","target","value","formWrapper","onSubmit","preventDefault","find","newContact","alert","uuidv4","post","createContact","form","label","input","type","pattern","title","required","onChange","FilterContacts","Spiner","spiner","color","height","width","timeout","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f4c20cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__3I0VP\",\"item\":\"ContactsList_item__1abdr\",\"button\":\"ContactsList_button__M9UiH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FilterContactForm_form__jAwRI\",\"label\":\"FilterContactForm_label__3M5aP\",\"input\":\"FilterContactForm_input__1ERN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2nGXs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spiner\":\"Spiner_spiner__3LHO5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"CreateContactForm_formWrapper__1CZxu\",\"form\":\"CreateContactForm_form__36rZ_\",\"label\":\"CreateContactForm_label__EcFAo\",\"input\":\"CreateContactForm_input__3zn7G\",\"button\":\"CreateContactForm_button__2nkw7\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const createContactsRequest = createAction('contacts/createContactsRequest');\nexport const createContactsSuccess = createAction('contacts/createContactsSuccess');\nexport const createContactsError = createAction('contacts/createContactsError');\n\n// export const setContacts = createAction('contacts/set');\n\nexport const getContactsRequest = createAction('contacts/getContactsRequest');\nexport const getContactsSuccess = createAction('contacts/getContactsSuccess');\nexport const getContactsError = createAction('contacts/getContactsError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactsRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactsSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactsError');\n\nexport const filterChange = createAction('contacts/filter');\n","import { combineReducers } from \"redux\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport {createContact, setContacts, deleteContact, filterChange, getContactsSuccess, deleteContactSuccess, createContactsSuccess, getContactsRequest, getContactsError, createContactsRequest, createContactsError, deleteContactRequest, deleteContactError} from './contacts-actions';\n\nconst items = createReducer([], {\n  [createContactsSuccess]: (state, {payload}) => [...state, payload],\n  [getContactsSuccess]: (_, {payload}) => [...payload],\n  [deleteContactSuccess]: (state, {payload}) => state.filter(contact => contact.id !== payload)\n});\n\nconst filter = createReducer('', {\n  [filterChange]: (_, {payload}) => payload,\n})\n\nconst loading = createReducer(false, {\n  [getContactsRequest]: () => true,\n  [getContactsSuccess]: () => false,\n  [getContactsError]: () => false,\n  [createContactsRequest]: () => true,\n  [createContactsSuccess]: () => false,\n  [createContactsError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport logger from \"redux-logger\";\n\nimport contactsReducer from \"./contacts/contacts-reducer\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst persistConfigContacts = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfigContacts, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport const persistor = persistStore(store);\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContactsSelector = state => state.contacts.items;\nexport const getFilterSelector = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilterContactsSelector = createSelector(\n  [getContactsSelector, getFilterSelector],\n  (contacts, filter) => {\n    let filteredContacts = contacts;\n    if (filter) {\n      filteredContacts = contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n      return filteredContacts;\n    } else {\n      return contacts;\n    }\n  }\n);\n","import axios from 'axios';\nimport { createContactsError, createContactsRequest, createContactsSuccess, deleteContactError, deleteContactRequest, deleteContactSuccess, getContactsError, getContactsRequest, getContactsSuccess } from './contacts-actions';\nimport { v4 as uuidv4 } from 'uuid';\n\naxios.defaults.baseURL = 'http://localhost:3000';\n\nexport const getContacts = () => async dispatch => {\n  dispatch(getContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(getContactsSuccess(data));\n  } catch (error) {\n    dispatch(getContactsError(error));\n  }\n};\n\nexport const deleteContact = contactId => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\nexport const createContact = ({name, number}) => dispatch => {\n  dispatch(createContactsRequest());\n  const contact = {\n    id: uuidv4(),\n    name,\n    number,\n  }\n  axios\n    .post(`/contacts`, contact)\n    .then(() => dispatch(createContactsSuccess(contact)))\n    .catch(error => dispatch(createContactsError(error)));\n};","import s from \"./ContactsList.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getFilterContactsSelector } from '../../redux/contacts/contacts-selectors';\nimport {getContacts, deleteContact } from '../../redux/contacts/contacts-operation';\nimport { useEffect } from \"react\";\n\nconst ContactsList = () => {\n  const filteredContacts = useSelector(getFilterContactsSelector)\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts())\n  }, [dispatch]);\n  \n  return (\n    <div>\n      <ul className={s.list}>\n        {filteredContacts.map((contact) => (\n          <li className={s.item} key={contact.id}>\n            {contact.name} {contact.number}{\" \"}\n            <button\n              className={s.button}\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;","import styles from \"./Container.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.array.isRequired\n}\n\nexport default Container;\n","\nimport s from \"./CreateContactForm.module.css\";\nimport { useSelector, useDispatch} from \"react-redux\";\nimport {createContact} from \"../../redux/contacts/contacts-operation\";\nimport { useState } from \"react\";\nimport { getContactsSelector } from \"../../redux/contacts/contacts-selectors\";\n\nconst initialState = {\n  name: '',\n  number: ''\n};\n\nconst CreateContactForm = () => {\n  const [contact, setContact] = useState({...initialState});\n  const contacts = useSelector(getContactsSelector);\n  const dispatch = useDispatch();\n\n  const onHandleChange = e => {\n    const { name, value } = e.target;\n    setContact({...contact, [name]: value });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const find = contacts.find(\n      (newContact) => newContact.name.toLowerCase() === contact.name.toLowerCase()\n    );\n    if (find) return alert(`${contact.name} is already in contacts`);\n    dispatch(createContact({name: contact.name, number: contact.number}));\n    setContact({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  return (\n    <div className={s.formWrapper}>\n    <form onSubmit={onSubmit}\n    className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={contact.name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      onChange={onHandleChange}/>\n      </label>\n      <label className={s.label}>\n        Phone\n        <input\n        className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={contact.number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={onHandleChange}\n        />\n\n      </label>\n      <button type=\"submit\"\n      className={s.button}>\n        Add contact\n      </button>\n    </form>\n    </div>\n  );\n}\n\nexport default CreateContactForm;","import s from \"./FilterContactForm.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport {filterChange} from '../../redux/contacts/contacts-actions';\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n  const onHandleChange = e => {\n    const { value } = e.target;\n    dispatch(filterChange(value));\n  };\n  return (\n    <div>\n      <form className={s.form} onSubmit={e => e.preventDefault()}>\n        <label className={s.label}>\n          Find contacts by name\n          <input\n          className={s.input}\n            type=\"text\"\n            name=\"filter\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={onHandleChange}\n          />\n        </label>\n      </form>\n    </div>\n  );\n}\n\nexport default FilterContacts;","import Loader from \"react-loader-spinner\";\nimport s from './Spiner.module.css';\n\nconst Spiner = () => {\n  return (\n    <div className={s.spiner}>\n      <Loader\n        type=\"Puff\"\n        color=\"#3f51b5\"\n        height={100}\n        width={100}\n        timeout={3000}\n      />\n    </div>\n  );\n}\n\nexport default Spiner;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getLoading } from \"../redux/contacts/contacts-selectors\";\nimport ContactsList from \"./contactsList/ContactsList\";\nimport Container from \"./container/Container\";\nimport CreateContactForm from \"./createContactForm/CreateContactForm\";\nimport FilterContacts from \"./filterContacts/FilterContacts\";\nimport Spiner from \"./spiner/Spiner\";\n\n\nconst App = () => {\n  const loading = useSelector(getLoading);\n  return (\n    <Container>\n        <h1>Phonebook</h1>\n        <CreateContactForm/>\n        <h2>Contacts</h2>\n        <FilterContacts/>\n        <ContactsList \n        />\n        {loading && <Spiner/>}\n      </Container>\n  );\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport App from \"./Components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n  <PersistGate loading={null} persistor={persistor}>\n    <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
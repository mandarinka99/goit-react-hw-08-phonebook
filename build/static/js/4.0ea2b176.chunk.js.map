{"version":3,"sources":["Components/createContactForm/CreateContactForm.module.css","Components/filterContacts/FilterContactForm.module.css","Components/contactsList/ContactsList.module.css","Components/editConnactModal/EditContactModal.module.css","redux/contacts/contacts-selectors.js","Components/createContactForm/CreateContactForm.js","redux/contacts/contacts-operation.js","Components/filterContacts/FilterContacts.js","Components/editConnactModal/EditContactModal.js","Components/contactsList/ContactsList.js","pages/ContactsPage.js"],"names":["module","exports","getContactsSelector","state","contacts","items","getFilterContactsSelector","createSelector","filter","contact","name","toLowerCase","includes","initialState","number","CreateContactForm","useState","setContact","useSelector","dispatch","useDispatch","onHandleChange","e","target","value","className","s","formWrapper","onSubmit","preventDefault","find","newContact","alert","createContactsRequest","axios","post","then","res","createContactsSuccess","data","catch","error","createContactsError","createContact","form","TextField","type","onChange","pattern","title","label","required","variant","size","formInp","Button","color","formBtn","FilterContacts","filterChange","input","EditContactModal","handleClose","Dialog","open","onClose","DialogTitle","id","DialogContent","autoFocus","fullWidth","DialogActions","formBtns","onClick","contactId","patchedContact","editContactRequest","patch","editContactSuccess","editContactError","ContactsList","setOpen","filteredContacts","useEffect","a","getContactsRequest","get","getContactsSuccess","getContactsError","item","list","map","ListItem","button","listItem","ListItemText","primary","itemText","console","log","handleClickOpen","btn","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","ContactsPage","Container","container","formTitle","contactsPage"],"mappings":"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","file":"static/js/4.0ea2b176.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"CreateContactForm_formWrapper__1CZxu\",\"form\":\"CreateContactForm_form__36rZ_\",\"formInp\":\"CreateContactForm_formInp__3tCfJ\",\"formBtn\":\"CreateContactForm_formBtn__1mDJ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FilterContactForm_input__1ERN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__3I0VP\",\"item\":\"ContactsList_item__1abdr\",\"listItem\":\"ContactsList_listItem__3tNSu\",\"itemText\":\"ContactsList_itemText__hGGc4\",\"btn\":\"ContactsList_btn__3o2CK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInp\":\"EditContactModal_formInp__22OUn\",\"formBtns\":\"EditContactModal_formBtns__3CXCZ\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContactsSelector = state => state.contacts.items;\nexport const getFilterSelector = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilterContactsSelector = createSelector(\n  [getContactsSelector, getFilterSelector],\n  (contacts, filter) => {\n    let filteredContacts = contacts;\n    if (filter) {\n      filteredContacts = contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n      return filteredContacts;\n    } else {\n      return contacts;\n    }\n  }\n);\n","import s from \"./CreateContactForm.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createContact } from \"../../redux/contacts/contacts-operation\";\nimport { useState } from \"react\";\nimport { getContactsSelector } from \"../../redux/contacts/contacts-selectors\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nconst initialState = {\n  name: \"\",\n  number: \"\",\n};\n\nconst CreateContactForm = () => {\n  const [contact, setContact] = useState({ ...initialState });\n  const contacts = useSelector(getContactsSelector);\n  const dispatch = useDispatch();\n\n  const onHandleChange = (e) => {\n    const { name, value } = e.target;\n    setContact({ ...contact, [name]: value });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const find = contacts.find(\n      (newContact) =>\n        newContact.name.toLowerCase() === contact.name.toLowerCase()\n    );\n    if (find) return alert(`${contact.name} is already in contacts`);\n    dispatch(createContact({ name: contact.name, number: contact.number }));\n    setContact({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  return (\n    <div className={s.formWrapper}>\n      <form onSubmit={onSubmit} className={s.form}>\n        <TextField\n          type=\"name\"\n          name=\"name\"\n          value={contact.name}\n          onChange={onHandleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          label=\"Name\"\n          required\n          variant=\"outlined\"\n          size=\"small\"\n          className={s.formInp}\n        />\n        <TextField\n          type=\"tel\"\n          name=\"number\"\n          value={contact.number}\n          onChange={onHandleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          label=\"Number\"\n          required\n          variant=\"outlined\"\n          size=\"small\"\n          className={s.formInp}\n        />\n\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          size=\"small\"\n          variant=\"outlined\"\n          className={s.formBtn}\n        >\n          ADD CONTACT\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateContactForm;\n","import axios from \"axios\";\nimport {\n  createContactsError,\n  createContactsRequest,\n  createContactsSuccess,\n  deleteContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  editContactError,\n  editContactRequest,\n  editContactSuccess,\n  getContactsError,\n  getContactsRequest,\n  getContactsSuccess,\n} from \"./contacts-actions\";\n\nexport const getContacts = () => async (dispatch) => {\n  dispatch(getContactsRequest());\n  try {\n    const { data } = await axios.get(\"/contacts\");\n    dispatch(getContactsSuccess(data));\n  } catch (error) {\n    dispatch(getContactsError(error));\n  }\n};\n\nexport const deleteContact = (contactId) => (dispatch) => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch((error) => dispatch(deleteContactError(error)));\n};\n\nexport const editContact = (contactId, patchedContact) => (dispatch) => {\n  dispatch(editContactRequest());\n  axios\n    .patch(`/contacts/${contactId}`, patchedContact)\n    .then((res) => dispatch(editContactSuccess(res.data)))\n    .catch((error) => dispatch(editContactError(error)));\n};\n\nexport const createContact = (contact) => (dispatch) => {\n  dispatch(createContactsRequest());\n  axios\n    .post(`/contacts`, contact)\n    .then((res) => dispatch(createContactsSuccess(res.data)))\n    .catch((error) => dispatch(createContactsError(error)));\n};\n","import s from \"./FilterContactForm.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { filterChange } from \"../../redux/contacts/contacts-actions\";\nimport { TextField } from \"@material-ui/core\";\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n  const onHandleChange = (e) => {\n    const { value } = e.target;\n    dispatch(filterChange(value));\n  };\n  return (\n    <div>\n      <form className={s.form} onSubmit={(e) => e.preventDefault()}>\n        <TextField\n          type=\"name\"\n          name=\"name\"\n          onChange={onHandleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          label=\"Find contacts by name\"\n          required\n          variant=\"outlined\"\n          size=\"small\"\n          className={s.input}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default FilterContacts;\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport s from \"./EditContactModal.module.css\";\nimport { editContact } from \"../../redux/contacts/contacts-operation\";\n\nconst EditContactModal = ({ handleClose, contact: initialState }) => {\n  const [contact, setContact] = useState({ ...initialState });\n  const dispatch = useDispatch();\n\n  const onHandleChange = (e) => {\n    const { name, value } = e.target;\n    setContact({ ...contact, [name]: value });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      editContact(contact.id, {\n        name: contact.name,\n        number: contact.number,\n      })\n    );\n    handleClose();\n  };\n  return (\n    <>\n      <Dialog\n        open={true}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Edit contact</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            name=\"name\"\n            id=\"name\"\n            label=\"Name\"\n            type=\"text\"\n            value={contact.name}\n            variant=\"outlined\"\n            fullWidth\n            onChange={onHandleChange}\n            className={s.formInp}\n          />\n          <TextField\n            autoFocus\n            id=\"number\"\n            label=\"Number\"\n            type=\"text\"\n            value={contact.number}\n            name=\"number\"\n            variant=\"outlined\"\n            onChange={onHandleChange}\n            fullWidth\n            className={s.formInp}\n          />\n        </DialogContent>\n        <DialogActions className={s.formBtns}>\n          <Button\n            onClick={onSubmit}\n            color=\"primary\"\n            variant=\"outlined\"\n            size=\"small\"\n          >\n            Edit\n          </Button>\n          <Button\n            onClick={handleClose}\n            color=\"primary\"\n            variant=\"outlined\"\n            size=\"small\"\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default EditContactModal;\n","import s from \"./ContactsList.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getFilterContactsSelector } from \"../../redux/contacts/contacts-selectors\";\nimport {\n  getContacts,\n  deleteContact,\n} from \"../../redux/contacts/contacts-operation\";\nimport { useEffect, useState } from \"react\";\nimport { Button, ListItem, ListItemText } from \"@material-ui/core\";\nimport EditContactModal from \"../editConnactModal/EditContactModal\";\n\nconst ContactsList = () => {\n  const [open, setOpen] = useState(false);\n  const [contact, setContact] = useState();\n  const filteredContacts = useSelector(getFilterContactsSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const handleClickOpen = (contact) => {\n    setContact(contact);\n    console.log(`contact`, contact);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <h2 className={s.item}>Your contacts</h2>\n      <ul className={s.list}>\n        {filteredContacts.map((contact) => (\n          <ListItem button key={contact.id} className={s.listItem}>\n            <ListItemText\n              primary={`${contact.name} ${contact.number}`}\n              className={s.itemText}\n            />\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => handleClickOpen(contact)}\n              size=\"small\"\n              className={s.btn}\n            >\n              Edit\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n              size=\"small\"\n            >\n              Delete\n            </Button>\n          </ListItem>\n        ))}\n      </ul>\n      {open && <EditContactModal handleClose={handleClose} contact={contact} />}\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import Container from \"../Components/container/Container\";\nimport CreateContactForm from \"../Components/createContactForm/CreateContactForm\";\nimport FilterContacts from \"../Components/filterContacts/FilterContacts\";\nimport ContactsList from \"../Components/contactsList/ContactsList\";\nimport s from \"./Pages.module.css\";\n\nconst ContactsPage = () => {\n  return (\n    <Container>\n      <div className={s.container}>\n        <h2 className={s.formTitle}>Phonebook</h2>\n        <div className={s.contactsPage}>\n          <CreateContactForm />\n          <div>\n            <FilterContacts />\n            <ContactsList />\n          </div>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"sourceRoot":""}